(function (g) {
    "function" === typeof define && define.amd ? define(["jquery", "datatables.net", "datatables.net-buttons"],
        function (d) {
            return g(d, window, document)
        }) : "object" === typeof exports ? module.exports = function (d, f) { d || (d = window); if (!f || !f.fn.dataTable) f = require("datatables.net")(d, f).$; f.fn.dataTable.Buttons || require("datatables.net-buttons")(d, f); return g(f, d, d.document) } : g(jQuery, window, document)
})(function (g, d, f, k) {
    var l = g.fn.dataTable, j;
    var ignoreColumn = [];
    var ignoreRow = [];
    var rowspans = [];
    if ("undefined" !== typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent))
        j = void 0;
    else {
        var v = d.document,
            o = v.createElementNS("http://www.w3.org/1999/xhtml", "a"),
            D = "download" in o,
            p = d.webkitRequestFileSystem,
            w = d.requestFileSystem || p || d.mozRequestFileSystem,
            E = function (a) {
                (d.setImmediate || d.setTimeout)(function () { throw a; }, 0)
            },
            q = 0,
            r = function (a) {
                var b = function () {
                    "string" === typeof a ? (d.URL || d.webkitURL || d).revokeObjectURL(a) : a.remove()
                }; d.chrome ? b() : setTimeout(b, 500)
            },
            s = function (a, b, e) {
                for (var b = [].concat(b), c = b.length; c--;) {
                    var d = a["on" + b[c]]; if ("function" === typeof d)
                        try {
                            d.call(a,
                            e || a)
                        }
                        catch (h) { E(h) }
                }
            },
            y = function (a) {
                return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(a.type) ? new Blob(["ï»¿", a], { type: a.type }) : a
            },
            A = function (a, b) {
                var a = y(a),
                    e = this,
                    c = a.type,
                    x = !1,
                    h, g, z = function () {
                        s(e, ["writestart", "progress", "write", "writeend"])
                    },
                    f = function () {
                        if (x || !h) h = (d.URL || d.webkitURL || d).createObjectURL(a);
                        g ? g.location.href = h : d.open(h, "_blank") === k && "undefined" !== typeof safari && (d.location.href = h); e.readyState = e.DONE; z(); r(h)
                    }, n = function (a) {
                        return function () {
                            if (e.readyState !==
                            e.DONE) return a.apply(this, arguments)
                        }
                    }, 
                    i = { create: !0, exclusive: !1 }, j;
                e.readyState = e.INIT;
                b || (b = "download");
                if (D)
                    h = (d.URL || d.webkitURL || d).createObjectURL(a),
                        o.href = h,
                        o.download = b,
                        c = v.createEvent("MouseEvents"),
                        c.initMouseEvent("click", !0, !1, d, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null),
                        o.dispatchEvent(c),
                        e.readyState = e.DONE,
                        z(), r(h);
                else {
                    d.chrome && (c && "application/octet-stream" !== c) && (j = a.slice || a.webkitSlice, a = j.call(a, 0, a.size, "application/octet-stream"), x = !0);
                    p && "download" !== b && (b += ".download");
                    if ("application/octet-stream" === c || p) g = d;
                    w ? (q += a.size, w(d.TEMPORARY, q, n(function (c) {
                        c.root.getDirectory("saved", i, n(function (c) {
                            var d = function () {
                                c.getFile(b, i, n(function (b) {
                                    b.createWriter(n(function (c) {
                                        c.onwriteend = function (a) {
                                            g.location.href = b.toURL(); e.readyState = e.DONE; s(e, "writeend", a); r(b)
                                        };
                                        c.onerror = function () {
                                            var a = c.error; a.code !== a.ABORT_ERR && f()
                                        };["writestart", "progress", "write", "abort"].forEach(function (a) {
                                            c["on" + a] = e["on" + a]
                                        }); c.write(a); e.abort = function () {
                                            c.abort(); e.readyState = e.DONE
                                        }; e.readyState = e.WRITING
                                    }), f)
                                }),
                                f)
                            };
                            c.getFile(b, { create: false }, n(function (a) {
                                a.remove(); d()
                            }), n(function (a) {
                                a.code === a.NOT_FOUND_ERR ? d() : f()
                            }))
                        }), f)
                    }), f)) : f()
                }
            },
            i = A.prototype;
        "undefined" !== typeof navigator && navigator.msSaveOrOpenBlob ? j = function (a, b) {
            return navigator.msSaveOrOpenBlob(y(a), b)
        } : (i.abort = function () {
            this.readyState = this.DONE; s(this, "abort")
        },
        i.readyState = i.INIT = 0,
        i.WRITING = 1,
        i.DONE = 2,
        i.error = i.onwritestart = i.onprogress = i.onwrite = i.onabort = i.onerror = i.onwriteend = null,
        j = function (a, b) {
            return new A(a, b)
        })
    }
    var t = function (a, b) {
        var e = "*" === a.filename && "*" !== a.title && a.title !== k ? a.title : a.filename;
        -1 !== e.indexOf("*") && (e = e.replace("*", g("title").text()));
        e = e.replace(/[^a-zA-Z0-9_\u00A1-\uFFFF\.,\-_ !\(\)]/g, "");
        return b === k || !0 === b ? e + a.extension : e
    },
    F = function (a) {
        a = a.title;
        return -1 !== a.indexOf("*") ? a.replace("*", g("title").text()) : a
    },
    u = function (a) {
        return a.newline ? a.newline : navigator.userAgent.match(/Windows/) ? "\r\n" : "\n"
    },
    B = function (a, b) {
        for (
            var e = u(b),
            c = a.buttons.exportData(b.exportOptions),
            d = b.fieldBoundary,
            h = b.fieldSeparator,
            f = RegExp(d, "g"),
            g = b.escapeChar !== k ? b.escapeChar : "\\",
            i = function (a) {
                for (var b = "", c = 0, e = a.length; c < e; c++)
                0 < c && (b += h), b += d ? d + ("" + a[c]).replace(f, g + d) + d : a[c]; return b
        }, n = b.header ? i(c.header) + e : "", j = b.footer ? e + i(c.footer) : "", l = [], m = 0, o = c.body.length; m < o; m++) l.push(i(c.body[m])); return { str: n + l.join(e) + j, rows: l.length }
    },
    C = function () {
        return -1 !== navigator.userAgent.indexOf("Safari") && -1 === navigator.userAgent.indexOf("Chrome") && -1 === navigator.userAgent.indexOf("Opera")
    };
    m = {
        "_rels/.rels": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\t<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument" Target="xl/workbook.xml"/></Relationships>',
        "xl/_rels/workbook.xml.rels": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Relationships xmlns="http://schemas.openxmlformats.org/package/2006/relationships">\t<Relationship Id="rId1" Type="http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet" Target="worksheets/sheet1.xml"/></Relationships>', "[Content_Types].xml": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">\t<Default Extension="xml" ContentType="application/xml"/>\t<Default Extension="rels" ContentType="application/vnd.openxmlformats-package.relationships+xml"/>\t<Default Extension="jpeg" ContentType="image/jpeg"/>\t<Override PartName="/xl/workbook.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml"/>\t<Override PartName="/xl/worksheets/sheet1.xml" ContentType="application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml"/></Types>',
        "xl/workbook.xml": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><workbook xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships">\t<fileVersion appName="xl" lastEdited="5" lowestEdited="5" rupBuild="24816"/>\t<workbookPr showInkAnnotation="0" autoCompressPictures="0"/>\t<bookViews>\t\t<workbookView xWindow="0" yWindow="0" windowWidth="25600" windowHeight="19020" tabRatio="500"/>\t</bookViews>\t<sheets>\t\t<sheet name="Sheet1" sheetId="1" r:id="rId1"/>\t</sheets></workbook>',
        "xl/worksheets/sheet1.xml": '<?xml version="1.0" encoding="UTF-8" standalone="yes"?><worksheet xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:r="http://schemas.openxmlformats.org/officeDocument/2006/relationships" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="x14ac" xmlns:x14ac="http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac">\t<sheetData>\t\t__DATA__\t</sheetData></worksheet>'
    };
    //event Copy table
    l.ext.buttons.copyHtml5 = {
        className: "buttons-copy buttons-html5",
        text: function (a) {
            return a.i18n("buttons.copy", "Copy")
        }, action: function (a, b, d, c) {
            a = B(b, c); c = a.str; d = g("<div/>").css({
                height: 1, width: 1, overflow: "hidden", position: "fixed", top: 0, left: 0
            }); c = g("<textarea readonly/>").val(c).appendTo(d);
            if (f.queryCommandSupported("copy")) {
                d.appendTo("body"); c[0].focus(); c[0].select();
                try {
                    f.execCommand("copy"); d.remove();
                    b.buttons.info(b.i18n("buttons.copyTitle", "Copy to clipboard"),
                    b.i18n("buttons.copySuccess",
                    { 1: "Copied one row to clipboard", _: "Copied %d rows to clipboard" }, a.rows), 2E3);
                    return
                } catch (i) { }
            }
            a = g("<span>" + b.i18n("buttons.copyKeys", "Press <i>ctrl</i> or <i>â</i> + <i>C</i> to copy the table data<br>to your system clipboard.<br><br>To cancel, click this message or press escape.") + "</span>").append(d);
            b.buttons.info(b.i18n("buttons.copyTitle", "Copy to clipboard"), a, 0);
            c[0].focus();
            c[0].select();
            var h = g(a).closest(".dt-button-info"), j = function () {
                h.off("click.buttons-copy");
                g(f).off(".buttons-copy");
                b.buttons.info(!1)
            };
            h.on("click.buttons-copy", j); g(f).on("keydown.buttons-copy", function (a) {
                27 === a.keyCode && j()
            }).on("copy.buttons-copy cut.buttons-copy", function () { j() })
        }, exportOptions: {}, fieldSeparator: "\t", fieldBoundary: "", header: !0, footer: !1
    };
    //event Export file CSV
    l.ext.buttons.csvHtml5 = {
        className: "buttons-csv buttons-html5",
        available: function () {
            return d.FileReader !== k && d.Blob
        },
        text: function (a) {
            return a.i18n("buttons.csv", "CSV")
        },
        action: function (a, b, d, c) {
            u(c);
            a = B(b, c).str;
            b = c.charset;
            !1 !== b ? (b || (b = f.characterSet || f.charset), b && (b = ";charset=" + b)) : b = "";
            j(new Blob([a], { type: "text/csv" + b }), t(c))
        },
        filename: "*",
        extension: ".csv",
        exportOptions: {},
        fieldSeparator: ",",
        fieldBoundary: '"',
        escapeChar: '"',
        charset: null,
        header: !0,
        footer: !1
    };
    //event Export file Excel/word
    l.ext.buttons.excelHtml5 = {
        className: "buttons-excel buttons-html5",
        available: function () {
            return d.FileReader !== k && d.JSZip !== k && !C()
        },
        text: function (a) {
            return a.i18n("buttons.excel", "Excel")
        },
        action: function (a, b, e, c) {
            a = "";
            b = b.buttons.exportData(c.exportOptions);

            //hÃ m bind table excel rowspan
            e = function (a, tag, index, lst_row) {
                var b = [];
                for (cellIdx = 0; cellIdx < a.length; cellIdx++) {
                    debugger
                    var countRowspan = 1;
                    if (null === a[cellIdx] || a[cellIdx] === k) a[cellIdx] = "";
                    var content = a[cellIdx].toString();
                    var re = new RegExp(',', 'g');
                    var numb = content.replace(re, '');
                    //náº¿u ko pháº£i kiá»u sá»
                    if (!$.isNumeric(numb)) {
                        if (index == 0) {
                            for (rowIdx = 1; rowIdx < lst_row.length; rowIdx++) {
                                if (a[cellIdx].toString() != lst_row[rowIdx][cellIdx].toString())
                                    break;
                                countRowspan++;
                            }
                        }
                        else {
                            if (lst_row[index - 1][cellIdx].toString() == a[cellIdx].toString())
                                countRowspan = 0;
                            else {
                                for (rowIdx = index + 1; rowIdx < lst_row.length; rowIdx++) {
                                    if (a[cellIdx].toString() != lst_row[rowIdx][cellIdx].toString())
                                        break;
                                    countRowspan++;
                                }
                            }
                        }
                    }
                    if (countRowspan == 0) {
                        
                    }
                    else if (countRowspan > 1) {
                        //debugger 
                        b.push($.isNumeric(a[cellIdx]) || a[cellIdx].match && a[cellIdx].match(/^-?[0-9\.\,]+$/) ?
                            '<' + tag + ' rowspan="' + countRowspan + '"  align="right" style="border:1px solid #848484; vertical-align: middle;text-align:right">' + Utils.ReplaceAll(numb, '.', ',') + '</' + tag + '>' :
                            '<' + tag + ' rowspan="' + countRowspan + '"  align="center" style="border:1px solid #848484; vertical-align: middle;">' + (!a[cellIdx].replace ? a[cellIdx] : a[cellIdx].replace(/&(?!amp;)/g, "&amp;").replace(/[\x00-\x1F\x7F-\x9F]/g, "")) + '</' + tag + '>')
                    }
                    else {
                        //debugger
                        b.push($.isNumeric(a[cellIdx]) || a[cellIdx].match && a[cellIdx].match(/^-?[0-9\.\,]+$/) ?
                            '<' + tag + ' align="right" style="border:1px solid #848484; vertical-align: middle; text-align:right">' + Utils.ReplaceAll(numb, '.', ',') + '</' + tag + '>' :
                            '<' + tag + ' align="center" style="border:1px solid #848484; vertical-align: middle;">' + (!a[cellIdx].replace ? a[cellIdx] : a[cellIdx].replace(/&(?!amp;)/g, "&amp;").replace(/[\x00-\x1F\x7F-\x9F]/g, "")) + '</' + tag + '>')
                    }
                }
                return "<tr>" + b.join("") + "</tr>"
            };

            var e_mb = function (a) {
                for (var b = [], c = 0, d = a.length; c < d; c++) {
                    if (null === a[c] || a[c] === k) a[c] = ""; b.push("number" === typeof a[c] ||
                    a[c].match && a[c].match(/^-?[0-9\.]+$/) && "0" !== a[c].charAt(0) ? '<c t="n"><v>' + a[c] + "</v></c>" : '<c t="inlineStr"><is><t>' + (!a[c].replace ? a[c] : a[c].replace(/&(?!amp;)/g, "&amp;").replace(/[\x00-\x1F\x7F-\x9F]/g, "")) + "</t></is></c>")
                } return "<row>" + b.join("") + "</row>"
            }

            var MSDocType = (c.doctype == 'excel' || c.doctype == 'xls') ? 'excel' : 'word';
            var MSDocExt = (MSDocType == 'excel') ? 'xls' : 'doc';
            var MSDocSchema = (MSDocExt == 'xls') ? 'xmlns:x="urn:schemas-microsoft-com:office:excel"' : 'xmlns:w="urn:schemas-microsoft-com:office:word"';
            if (MSDocExt == 'xls' && /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0, 4)))
            {
                c.header && (a += e_mb(b.header)); for (var f = 0, h = b.body.length; f < h; f++) a += e_mb(b.body[f]); c.footer && (a += e_mb(b.footer)); var b = new d.JSZip, e = b.folder("_rels"), f = b.folder("xl"), h = b.folder("xl/_rels"), g = b.folder("xl/worksheets"); b.file("[Content_Types].xml",
            m["[Content_Types].xml"]); e.file(".rels", m["_rels/.rels"]); f.file("workbook.xml", m["xl/workbook.xml"]); h.file("workbook.xml.rels", m["xl/_rels/workbook.xml.rels"]); g.file("sheet1.xml", m["xl/worksheets/sheet1.xml"].replace("__DATA__", a)); j(b.generate({ type: "blob" }), t(c))
            }
            else {
                rowIndex = 0;
                var docData = "";
                if (c.title != "" || c.title != undefined) {
                    docData = "<h2 style='font-size:15px;font-weight:bold;width:100%; text-align:center'>" + c.title + "</h2>";
                }
                docData += '<table width="100%" cellspacing="1" border="1"><thead>';
                // Header
                var $hrows = [];
                var $rows = [];
                var excelstyles = ['border-bottom', 'border-top', 'border-left', 'border-right', 'background', 'color', 'text-align'];
                $hrows = $("#" + c.tableId).find('thead').first().find("tr");
                $hrows.each(function () {
                    trData = "";
                    ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                            function (cell, row, col) {
                                if (cell != null) {
                                    trData += '<th style="background:#d9edf7;';
                                    for (var styles in excelstyles) {
                                        if (excelstyles.hasOwnProperty(styles)) {
                                            trData += excelstyles[styles] + ': ' + $(cell).css(excelstyles[styles]) + ';';
                                        }
                                    }
                                    if ($(cell).is("[width]"))
                                        trData += '" width="' + $(cell).attr('width');
                                    if ($(cell).is("[colspan]"))
                                        trData += '" colspan="' + $(cell).attr('colspan');
                                    if ($(cell).is("[rowspan]"))
                                        trData += '" rowspan="' + $(cell).attr('rowspan');
                                    trData += '">' + parseString(cell, row, col) + '</th>';
                                }
                            });
                    if (trData.length > 0)
                        docData += '<tr>' + trData + '</tr>';
                    rowIndex++;
                });

                docData += '</thead><tbody>';
                for (var f = 0, h = b.body.length; f < h; f++)
                    docData += e(b.body[f], 'td', f, b.body);

                docData += '</tbody><tfoot>';

                //footer
                // Row Vs Column
                $rows = $("#" + c.tableId).find('tfoot').first().find("tr");
                $rows.each(function () {
                    trData = "";
                    ForEachVisibleCell(this, 'td', rowIndex, $hrows.length + $rows.length,
                            function (cell, row, col) {
                                if (cell != null) {
                                    trData += '<td style="';
                                    for (var styles in excelstyles) {
                                        if (excelstyles.hasOwnProperty(styles)) {
                                            trData += excelstyles[styles] + ': ' + $(cell).css(excelstyles[styles]) + ';';
                                        }
                                    }
                                    if ($(cell).is("[colspan]"))
                                        trData += '" colspan="' + $(cell).attr('colspan');
                                    if ($(cell).is("[rowspan]"))
                                        trData += '" rowspan="' + $(cell).attr('rowspan');
                                    trData += '"><b>' + parseString(cell, row, col) + '</b></td>';
                                }
                            });
                    if (trData.length > 0)
                        docData += '<tr style="background:#d9edf7">' + trData + '</tr>';
                    rowIndex++;
                });


                docData += '</tfoot></table>';
                var docFile = '<html xmlns:o="urn:schemas-microsoft-com:office:office" ' + MSDocSchema + ' xmlns="http://www.w3.org/TR/REC-html40">';
                docFile += '<meta http-equiv="content-type" content="application/vnd.ms-' + MSDocType + '; charset=UTF-8">';
                docFile += "<head>";
                if (MSDocType === 'excel') {
                    docFile += "<!--[if gte mso 9]>";
                    docFile += "<xml>";
                    docFile += "<x:ExcelWorkbook>";
                    docFile += "<x:ExcelWorksheets>";
                    docFile += "<x:ExcelWorksheet>";
                    docFile += "<x:Name>";
                    docFile += 'xlsWorksheetName';
                    docFile += "</x:Name>";
                    docFile += "<x:WorksheetOptions>";
                    docFile += "<x:DisplayGridlines/>";
                    docFile += "</x:WorksheetOptions>";
                    docFile += "</x:ExcelWorksheet>";
                    docFile += "</x:ExcelWorksheets>";
                    docFile += "</x:ExcelWorkbook>";
                    docFile += "</xml>";
                    docFile += "<![endif]-->";
                }
                docFile += "</head>";
                docFile += "<body>";
                docFile += docData;
                docFile += "</body>";
                docFile += "</html>";
                var base64data = base64encode(docFile);
                try {
                    var blob = new Blob([docFile], { type: 'application/vnd.ms-' + MSDocType });
                    saveAs(blob, c.filename + '.' + MSDocExt);
                }
                catch (e) {
                    downloadFile(c.filename + '.' + MSDocExt, 'data:application/vnd.ms-' + MSDocType + ';base64,' + base64data);
                }
            }
            
        },
        filename: "ExportFile",
        extension: ".xlsx",
        exportOptions: {},
        header: !0,
        footer: !1,
        tableId: "table-static",
        doctype: "excel",
        title:""
    };
    //event Export file PDF
    l.ext.buttons.pdfHtml5 = {
        className: "buttons-pdf buttons-html5", available: function () {
            return d.FileReader !== k && d.pdfMake
        },
        text: function (a) {
            return a.i18n("buttons.pdf","PDF")
        },
        action: function (a, b, e, c) {
            u(c);
            a = b.buttons.exportData(c.exportOptions);
            b = [];
            ignoreColumn = [];
            ignoreRow = [];
            rowspans = [];
            var $hrows = [];
            var $frows = [];
            // Header
            rowIndex = 0;
            Utils.Loading();

            if (a.header) {
                $hrows = $("#" + c.tableId).find('thead').first().find("tr");
                $hrows.each(function () {
                    var $rows = [];
                    var colspan = 0;
                    var rowspan = 0;
                    ForEachVisibleCell(this, 'th,td', rowIndex, $hrows.length,
                            function (cell, row, col) {
                                var trData = {};
                                if (cell != null) {
                                    if ($(cell).is("[colspan]"))
                                        colspan = $(cell).attr('colspan');
                                    if ($(cell).is("[rowspan]"))
                                        rowspan = $(cell).attr('rowspan');

                                    trData = {
                                        text: parseString(cell, row, col),
                                        style: 'tableHeader',
                                        colSpan: parseInt(colspan),
                                        alignment: 'center',
                                        rowSpan: parseInt(rowspan)
                                    }
                                }
                                $rows.push(trData);
                            });
                    if ($rows.length > 0)
                        b.push($rows);
                    rowIndex++;
                });

            }

            //duyá»t body -> duyá»t tá»«ng row -> push vÃ o obj -> b
            for (var f = 0, e = a.body.length; f < e; f++) {
                var bodyObj = a.body;
                var lengthBody = a.body.length;
                var cell = 0;
                //push máº£ng obj row -> b 
                b.push(
                    //duyá»t tá»«ng cell trong row -> add tá»«ng obj cell vÃ o row[{objcell1, objCell2 v..v..}]
                    g.map(bodyObj[f], function (a) {
                        var count = 1;
                        var obj = {
                            text: "string" === typeof a ? a : a + "",
                            style: f % 2 ? "tableBodyEven" : "tableBodyOdd",
                            rowSpan: count,
                            alignment: 'right'
                        };
                        var re = new RegExp(',', 'g');
                        var numb = a.replace(re, '');
                        //náº¿u ko pháº£i kiá»u sá»
                        if (!$.isNumeric(numb)) {
                            //Náº¿u lÃ  row Äáº§u tiÃªn
                            if (f == 0) {
                                for (index = 1; index < bodyObj.length; index++) {
                                    if (a.toString() != bodyObj[index][cell].toString())
                                        break;
                                    count++;
                                }
                                if (count > 1) {
                                    obj.rowSpan= count;
                                    obj.alignment= 'center';
                                }
                                obj.alignment = 'center';
                            }
                            else {
                                if (bodyObj[f - 1][cell].toString() == a.toString())
                                    obj = {};
                                else {
                                    for (index = f + 1; index < bodyObj.length; index++) {
                                        if (a.toString() != bodyObj[index][cell].toString())
                                            break;
                                        count++;
                                    }
                                    if (count > 1) {
                                        obj.rowSpan = count;
                                        obj.alignment = 'center';
                                    }
                                    obj.alignment = 'center';
                                }
                            }
                            
                        }
                        cell++;
                        return obj;
                    })
                );
            }
           
            var cellIndex = 0;
            
            rowIndex = 0;
            if (c.footer) {
                $frows = $("#" + c.tableId).find('tfoot').first().find("tr");
                $frows.each(function () {
                    var $rows = [];
                    var colspan = 1;
                    var rowspan = 1;
                    ForEachVisibleCell(this, 'th,td', rowIndex, $frows.length,
                            function (cell, row, col) {
                                var trData = {};
                                if (cell != null) {
                                    if ($(cell).is("[colspan]"))
                                        colspan = $(cell).attr('colspan');
                                    if ($(cell).is("[rowspan]"))
                                        rowspan = $(cell).attr('rowspan');

                                    trData = {
                                        text: parseString(cell, row, col),
                                        style: 'tableFooter',
                                        colSpan: parseInt(colspan),
                                        alignment: 'right',
                                        rowSpan: parseInt(rowspan)
                                    }
                                }
                                $rows.push(trData);
                            });
                    if ($rows.length > 0)
                        b.push($rows);
                    rowIndex++;
                });
            }
            a = {
                pageSize: c.pageSize,
                pageOrientation: c.orientation,
                content: [{
                    table: {
                        headerRows: c.headerRows,
                        widths: c.widths,
                        body: b
                    }
                    //,layout: "noBorders"
                }],
                styles: {
                    tableHeader: {
                        bold: !0,
                        fontSize: 9,
                        color: "white",
                        fillColor: "#2d4154",
                        alignment: "center"
                    },
                    //tableBodyEven: {},
                    //tableBodyOdd: {
                    //    fillColor: "#f3f3f3"
                    //},
                    tableFooter: {
                        bold: !0,
                        fontSize: 9,
                        color: "white",
                        fillColor: "#2d4154"
                    },
                    title: {
                        alignment: "center",
                        fontSize: 15
                    },
                    message: {}
                },
                defaultStyle: {
                    fontSize: 8
                }
            };
            c.message && a.content.unshift({
                text: c.message,
                style: "message",
                margin: [0, 0, 0, 12]
            });
            c.title && a.content.unshift({
                text: F(c, !1),
                style: "title",
                margin: [0, 0, 0, 12]
            });
            c.customize && c.customize(a);
            a = d.pdfMake.createPdf(a);
            
            "open" === c.download && !C() ? a.open() : a.getBuffer(function (a) {
                a = new Blob([a], { type: "application/pdf" }); j(a, t(c));
                Utils.UnLoading();
            })
        },
        title: "*",
        tableId: "table-static",
        filename: "*",
        extension: ".pdf",
        widths: '*',
        exportOptions: {},
        orientation: "portrait",
        pageSize: "A4",
        header: !0,
        footer: !1,
        message: null,
        customize: null,
        download: "download",
        headerRows: 1
    }; return l.Buttons

    function utf8Encode(string) {
        string = string.replace(/\x0d\x0a/g, "\x0a");
        var utftext = "";
        for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);
            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            }
            else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    }

    function base64encode(input) {
        var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
        var i = 0;
        input = utf8Encode(input);
        while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;
            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }
            output = output +
                    keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) + keyStr.charAt(enc4);
        }
        return output;
    }

    function downloadFile(filename, data) {
        var DownloadEvt = null;
        var DownloadLink = document.createElement('a');

        if (DownloadLink) {
            DownloadLink.style.display = 'none';
            DownloadLink.download = filename;
            DownloadLink.href = data;

            document.body.appendChild(DownloadLink);

            if (document.createEvent) {
                if (DownloadEvt == null)
                    DownloadEvt = document.createEvent('MouseEvents');

                DownloadEvt.initEvent('click', true, false);
                DownloadLink.dispatchEvent(DownloadEvt);
            }
            else if (document.createEventObject)
                DownloadLink.fireEvent('onclick');
            else if (typeof DownloadLink.onclick == 'function')
                DownloadLink.onclick();

            document.body.removeChild(DownloadLink);
        }
    }
    function parseString(cell, rowIndex, colIndex) {
        var onCellData = null;
        var onCellHtmlData = null;
        var numbers =
            {
                html: {
                    decimalMark: '.',
                    thousandsSeparator: ','
                },
                output: {
                    decimalMark: '.',
                    thousandsSeparator: ','
                }
            };
        var escape = false;
        var result = '';
        var htmlContent = false;
        if (cell != null) {
            var $cell = $(cell);
            var htmlData = $cell.html();

            if (typeof onCellHtmlData === 'function')
                htmlData = onCellHtmlData($cell, rowIndex, colIndex, htmlData);

            if (htmlContent === true) {
                result = $.trim(htmlData);
            }
            else {
                var text = htmlData.replace(/\n/g, '\u2028').replace(/<br\s*[\/]?>/gi, '\u2060');
                var obj = $('<div/>').html(text).contents();
                text = '';
                $.each(obj.text().split("\u2028"), function (i, v) {
                    if (i > 0)
                        text += " ";
                    text += $.trim(v);
                });

                $.each(text.split("\u2060"), function (i, v) {
                    if (i > 0)
                        result += "\n";
                    result += $.trim(v).replace(/\u00AD/g, ""); // remove soft hyphens
                });

                if (numbers.html.decimalMark != numbers.output.decimalMark ||
                    numbers.html.thousandsSeparator != numbers.output.thousandsSeparator) {
                    var number = parseNumber(result);

                    if (number !== false) {
                        var frac = ("" + number).split('.');
                        if (frac.length == 1)
                            frac[1] = "";
                        var mod = frac[0].length > 3 ? frac[0].length % 3 : 0;

                        result = (number < 0 ? "-" : "") +
                                 (numbers.output.thousandsSeparator ? ((mod ? frac[0].substr(0, mod) + numbers.output.thousandsSeparator : "") + frac[0].substr(mod).replace(/(\d{3})(?=\d)/g, "$1" + numbers.output.thousandsSeparator)) : frac[0]) +
                                 (frac[1].length ? numbers.output.decimalMark + frac[1] : "");
                    }
                }
            }

            if (escape === true) {
                result = escape(result);
            }

            if (typeof onCellData === 'function') {
                result = onCellData($cell, rowIndex, colIndex, result);
            }
        }

        return result;
    }
    function ForEachVisibleCell(tableRow, selector, rowIndex, rowCount, cellcallback) {
        if ($.inArray(rowIndex, ignoreRow) == -1 &&
            $.inArray(rowIndex - rowCount, ignoreRow) == -1) {

            var $row = $(tableRow).filter(function () {
                return $(this).data("tableexport-display") != 'none' &&
                       ($(this).is(':visible') ||
                        $(this).data("tableexport-display") == 'always' ||
                        $(this).closest('table').data("tableexport-display") == 'always');
            }).find(selector);
            var rowColspan = 0;
            var idx = 0;
            $row.each(function (colIndex) {
                
                if ($(this).data("tableexport-display") == 'always' ||
                    ($(this).css('display') != 'none' &&
                     $(this).css('visibility') != 'hidden' &&
                     $(this).data("tableexport-display") != 'none')) {
                    if ($.inArray(colIndex, ignoreColumn) == -1 &&
                        $.inArray(colIndex - $row.length, ignoreColumn) == -1) {
                        if (typeof (cellcallback) === "function") {
                            var c, Colspan = 0;
                            var r, Rowspan = 0;
                            
                            // handle rowspans from previous rows
                            if (typeof rowspans[rowIndex] != 'undefined' && rowspans[rowIndex].length > 0) {
                                for (c = 0; c <= idx; c++) {
                                    if (typeof rowspans[rowIndex][c] != 'undefined') {
                                        cellcallback(null, rowIndex, c);
                                        delete rowspans[rowIndex][c];
                                        idx++;
                                    }
                                }
                            }
                            if ($(this).is("[colspan]")) {
                                Colspan = parseInt($(this).attr('colspan'));
                                rowColspan += Colspan > 0 ? Colspan - 1 : 0;
                            }

                            if ($(this).is("[rowspan]"))
                                Rowspan = parseInt($(this).attr('rowspan'));

                            // output content of current cell
                            cellcallback(this, rowIndex, idx);

                            // handle colspan of current cell
                            for (c = 1; c < Colspan; c++)
                            {
                                cellcallback(null, rowIndex, colIndex + c);
                                idx++;
                            }

                            if (colIndex == $row.length - 1) {
                                if (typeof rowspans[rowIndex] != 'undefined' && rowspans[rowIndex].length > 0) {
                                    for (c = idx + 1; c < rowspans[rowIndex].length; c++) {
                                        if (typeof rowspans[rowIndex][c] != 'undefined') {
                                            cellcallback(null, rowIndex, c);
                                            delete rowspans[rowIndex][c];
                                        }
                                    }
                                }
                                
                            }
                            
                            // store rowspan for following rows
                            if (Rowspan) {
                                for (r = 1; r < Rowspan; r++) {
                                    if (typeof rowspans[rowIndex + r] == 'undefined')
                                        rowspans[rowIndex + r] = [];

                                    rowspans[rowIndex + r][idx] = "";

                                    for (c = 1; c < Colspan; c++)
                                        rowspans[rowIndex + r][idx] = "";
                                }
                            }
                            idx++;
                        }
                    }
                }
                if (colIndex == $row.length - 1) {
                    idx = 0;
                }
            });
        }
    }

});
